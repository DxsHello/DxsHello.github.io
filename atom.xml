<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柚子想睡觉</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-19T07:49:55.861Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wyq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue中的Cannot GET/xxx</title>
    <link href="http://example.com/2022/05/19/Vue%E4%B8%AD%E7%9A%84Cannot-GET-xxx/"/>
    <id>http://example.com/2022/05/19/Vue%E4%B8%AD%E7%9A%84Cannot-GET-xxx/</id>
    <published>2022-05-19T07:16:23.000Z</published>
    <updated>2022-05-19T07:49:55.861Z</updated>
    
    <content type="html"><![CDATA[<p><strong>场景</strong></p><ul><li>Vue3</li><li>模式：单页面应用（SPA）模式</li><li>路由模式：history</li></ul><p><strong>问题一：</strong>刷新页面，出现Cannot GET / xxx</p><p><img src="/2022/05/19/Vue%E4%B8%AD%E7%9A%84Cannot-GET-xxx/%E9%97%AE%E9%A2%98%E4%B8%80.png" alt="问题一"></p><p><strong>解决办法：</strong>设置<code>historyApiFallback: true</code></p><blockquote><p>webpack.config.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;  </span><br><span class="line">   ...  </span><br><span class="line">   historyApiFallback: true  </span><br><span class="line">   ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题二：</strong>在问题一解决的基础上增加代理（proxy）配置，刷新页面，再次出现 <code>Cannot GET / xxx</code>问题，并且控制台还有404报错信息</p><ul><li><p><strong>基础配置</strong></p><blockquote><p>webpack.config.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  ...</span><br><span class="line">  historyApiFallback: true,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    &#x27;/&#x27;: &#123;</span><br><span class="line">      target: &#x27;http://localhost:3000&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>问题</strong><br><img src="/2022/05/19/Vue%E4%B8%AD%E7%9A%84Cannot-GET-xxx/%E9%97%AE%E9%A2%98%E4%BA%8C.png" alt="问题一"></p></li><li><p><strong>解决办法</strong>：<code>bypass</code></p><blockquote><p>webpack.config.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  ...</span><br><span class="line">  historyApiFallback: true,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    &#x27;/&#x27;: &#123;</span><br><span class="line">      target: &#x27;http://localhost:3000&#x27;,</span><br><span class="line">      bypass: function (req, res, proxyOptions) &#123;</span><br><span class="line">        if (req.headers.accept.indexOf(&#x27;html&#x27;) !== -1) &#123;</span><br><span class="line">          return &#x27;index.html&#x27;; // SPA，只有一个html页面，所有都返回index.html页面</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue3&lt;/li&gt;
&lt;li&gt;模式：单页面应用（SPA）模式&lt;/li&gt;
&lt;li&gt;路由模式：history&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问题一：&lt;/strong&gt;刷新页面，出现Cannot GET</summary>
      
    
    
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客后图片无法显示的解决办法</title>
    <link href="http://example.com/2022/05/18/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2022/05/18/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2022-05-18T06:47:06.000Z</published>
    <updated>2022-05-18T07:10:47.840Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-要添加图片，先npm-install一个hexo-asset-image的依赖"><a href="#1-要添加图片，先npm-install一个hexo-asset-image的依赖" class="headerlink" title="1. 要添加图片，先npm install一个hexo-asset-image的依赖"></a>1. 要添加图片，先npm install一个hexo-asset-image的依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><h4 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2. 操作步骤"></a>2. 操作步骤</h4><ul><li><p>然后把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。</p><p>比如我将post_asset_folder设为true之后hexo new post “first-page”之后新建了一篇文章，就会同时在hexo/source/_post文件夹下生成一个.md文件和一个同名文件夹，文件夹存放文章中的图片</p></li><li><p>把图片放到.md文件的同名文件夹”first-page”里，最后在.md文件中引用图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](./包名/图片名.png)</span><br></pre></td></tr></table></figure></li><li><p>保存文件的修改之后，在命令行输入hexo clean,接着输入hexo g –d。在浏览器输入域名后查看相关文章，显示图片成功！！！</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-要添加图片，先npm-install一个hexo-asset-image的依赖&quot;&gt;&lt;a href=&quot;#1-要添加图片，先npm-install一个hexo-asset-image的依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 要添加图片，先</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue3环境搭建及项目搭建</title>
    <link href="http://example.com/2022/05/18/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/05/18/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-18T02:20:02.000Z</published>
    <updated>2022-05-18T06:25:19.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h4><p>安装完毕之后，执行一下命令查看node版本：</p><p>node -v</p><h4 id="2-npm"><a href="#2-npm" class="headerlink" title="2. npm"></a>2. npm</h4><p>npm是随同nodejs一起安装的包管理工具，能解决nodejs代码部署上的很多问题；</p><p>可以通过输入 npm -v 来测试是否安装成功</p><h4 id="3-创建vue项目"><a href="#3-创建vue项目" class="headerlink" title="3. 创建vue项目"></a>3. 创建vue项目</h4><ul><li><p>使用 npm 全局安装 vue-cli(最新)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure></li><li><p>查看现在的版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure></li><li><p>创建一个项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名称不能用中文</span><br></pre></td></tr></table></figure><p><strong>注意：不能用驼峰方式命名项目名称了，它会报错的，只能全小写</strong></p></li><li><p>选择预设(默认/手动设置)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Please</span> pick a <span class="attr">preset</span>: (<span class="title class_">Use</span> arrow keys)</span><br><span class="line">  testPreset ([<span class="title class_">Vue</span> <span class="number">3</span>] less, babel, router, vuex) </span><br><span class="line">  <span class="title class_">Default</span> ([<span class="title class_">Vue</span> <span class="number">3</span>] babel, eslint) </span><br><span class="line">  <span class="title class_">Default</span> ([<span class="title class_">Vue</span> <span class="number">2</span>] babel, eslint) </span><br><span class="line">❯ <span class="title class_">Manually</span> select features </span><br></pre></td></tr></table></figure><p>移动上下键，选择最后一个Manually select features进行手动创建，按回车</p></li><li><p>选择需要安装的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Check</span> the features needed <span class="keyword">for</span> your <span class="attr">project</span>: (<span class="title class_">Press</span> &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line"> ◉ <span class="title class_">Babel</span></span><br><span class="line"> ◯ <span class="title class_">TypeScript</span></span><br><span class="line"> ◯ <span class="title class_">Progressive</span> <span class="title class_">Web</span> <span class="title class_">App</span> (<span class="variable constant_">PWA</span>) <span class="title class_">Support</span></span><br><span class="line"> ◉ <span class="title class_">Router</span></span><br><span class="line"> ◉ <span class="title class_">Vuex</span></span><br><span class="line"> ◉ <span class="variable constant_">CSS</span> <span class="title class_">Pre</span>-processors</span><br><span class="line"> ◯ <span class="title class_">Linter</span> / <span class="title class_">Formatter</span></span><br><span class="line">❯◯ <span class="title class_">Unit</span> <span class="title class_">Testing</span></span><br><span class="line"> ◯ <span class="variable constant_">E2E</span> <span class="title class_">Testing</span></span><br></pre></td></tr></table></figure><p>移动上下键，箭头指着时，按空格键选中所需要的，以上选择的是babel、router、vuex、css pre-processors这四个插件，按回车到下一步   </p></li><li><p>选择vue版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Choose</span> a version <span class="keyword">of</span> <span class="title class_">Vue</span>.<span class="property">js</span> that you want to start the project <span class="keyword">with</span> (<span class="title class_">Use</span> arrow keys)</span><br><span class="line">❯ <span class="number">3.</span>x </span><br><span class="line">  <span class="number">2.</span>x </span><br></pre></td></tr></table></figure></li><li><p>是否按照history的方式创建路由，选择yes，回车下一步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Use</span> history mode <span class="keyword">for</span> router? (<span class="title class_">Requires</span> proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) (Y/n) y</span><br></pre></td></tr></table></figure></li><li><p>选择css预编译工具，选择less，回车下一步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Pick</span> a <span class="variable constant_">CSS</span> pre-processor (<span class="title class_">PostCSS</span>, <span class="title class_">Autoprefixer</span> and <span class="variable constant_">CSS</span> <span class="title class_">Modules</span> are supported by <span class="keyword">default</span>): </span><br><span class="line">  <span class="title class_">Sass</span>/<span class="variable constant_">SCSS</span> (<span class="keyword">with</span> dart-sass) </span><br><span class="line">❯ <span class="title class_">Less</span> </span><br><span class="line">  <span class="title class_">Stylus</span> </span><br></pre></td></tr></table></figure></li><li><p>想把的配置文件放在一个独立的配置文件中？还是放到package.json中？选择第一个，回车下一步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Where</span> <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> <span class="title class_">Babel</span>, <span class="title class_">ESLint</span>, etc.? (<span class="title class_">Use</span> arrow keys)</span><br><span class="line">❯ <span class="title class_">In</span> dedicated config files </span><br><span class="line">  <span class="title class_">In</span> package.<span class="property">json</span> </span><br></pre></td></tr></table></figure></li><li><p>是否保存预设并用到以后的项目中，选择yes，回车下一步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Save</span> <span class="variable language_">this</span> <span class="keyword">as</span> a preset <span class="keyword">for</span> future projects? (y/N) yes</span><br></pre></td></tr></table></figure></li><li><p>保存的预设名称是什么，设为testPreset，回车下一步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Save</span> preset <span class="attr">as</span>: testPreset</span><br></pre></td></tr></table></figure></li><li><p>选择安装工具，回车下一步直到安装完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Pick</span> the package manager to use when installing <span class="attr">dependencies</span>: <span class="variable constant_">NPM</span></span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名称</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li><li><p>最终全部结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? <span class="title class_">Please</span> pick a <span class="attr">preset</span>: <span class="title class_">Manually</span> select features</span><br><span class="line">? <span class="title class_">Check</span> the features needed <span class="keyword">for</span> your <span class="attr">project</span>: <span class="title class_">Babel</span>, <span class="title class_">Router</span>, <span class="title class_">Vuex</span>, <span class="variable constant_">CSS</span> <span class="title class_">Pre</span>-processors</span><br><span class="line">? <span class="title class_">Choose</span> a version <span class="keyword">of</span> <span class="title class_">Vue</span>.<span class="property">js</span> that you want to start the project <span class="keyword">with</span> <span class="number">3.</span>x</span><br><span class="line">? <span class="title class_">Use</span> history mode <span class="keyword">for</span> router? (<span class="title class_">Requires</span> proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) <span class="title class_">Yes</span></span><br><span class="line">? <span class="title class_">Pick</span> a <span class="variable constant_">CSS</span> pre-processor (<span class="title class_">PostCSS</span>, <span class="title class_">Autoprefixer</span> and <span class="variable constant_">CSS</span> <span class="title class_">Modules</span> are supported by <span class="keyword">default</span>): <span class="title class_">Less</span></span><br><span class="line">? <span class="title class_">Where</span> <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> <span class="title class_">Babel</span>, <span class="title class_">ESLint</span>, etc.? <span class="title class_">In</span> dedicated config files</span><br><span class="line">? <span class="title class_">Save</span> <span class="variable language_">this</span> <span class="keyword">as</span> a preset <span class="keyword">for</span> future projects? <span class="title class_">Yes</span></span><br><span class="line">? <span class="title class_">Save</span> preset <span class="attr">as</span>: testPreset</span><br><span class="line">? <span class="title class_">Pick</span> the package manager to use when installing <span class="attr">dependencies</span>: <span class="variable constant_">NPM</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-结果"><a href="#4-结果" class="headerlink" title="4. 结果"></a>4. 结果</h4><p>运行地址，出现如下页面：</p><p><img src="/2022/05/18/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C.png" alt="最终结果"></p><h4 id="5-特别注意事项"><a href="#5-特别注意事项" class="headerlink" title="5. 特别注意事项"></a>5. 特别注意事项</h4><p><strong>在mac上安装会报错Error: EACCES: permission denied, access ‘/usr/local/lib/node_modules</strong></p><p>原因：执行命令时没有获得管理员权限</p><p>解决办法：在命令行前面添加sudo获取管理员权限</p><p>例如原来的为：npm install -g vue-cli</p><p>应该改为：sudo npm install -g vue-cli </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-安装node-js&quot;&gt;&lt;a href=&quot;#1-安装node-js&quot; class=&quot;headerlink&quot; title=&quot;1. 安装node.js&quot;&gt;&lt;/a&gt;1. 安装node.js&lt;/h4&gt;&lt;p&gt;安装完毕之后，执行一下命令查看node版本：&lt;/p&gt;
&lt;p&gt;no</summary>
      
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS上搭建Hexo博客流程</title>
    <link href="http://example.com/2022/03/11/Mac%20OS%E4%B8%8A%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2022/03/11/Mac%20OS%E4%B8%8A%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/</id>
    <published>2022-03-11T06:04:22.546Z</published>
    <updated>2022-05-18T08:26:09.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><ul><li><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></li><li>Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h4 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h4><ul><li>为了把本地的网页文件上传到github上面去，需要用到工具–Git[下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ]</li><li>安装完成后在命令提示符中输入git –version来查看一下版本验证是否安装成功</li></ul><h4 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h4><ul><li>首先根据自己电脑型号下载稳定版，下载地址 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装选项全部默认即可，一路点击Next</li><li>安装完成后，打开命令提示符，输入node -V 和npm -V，如果出现版本号，那么安装成功。</li></ul><h4 id="3-安装淘宝镜像"><a href="#3-安装淘宝镜像" class="headerlink" title="3. 安装淘宝镜像"></a>3. 安装淘宝镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用npm安装相关依赖包，速度很慢，建议安装淘宝镜像，后续命令使用cnpm</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>前面安装好git和nodejs后，就可以安装hexo了，可以先创建一个文件夹Blog，用来存放自己的博客文件，然后cd到这个文件夹下，定位到该目录下后:</p><h4 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>后续如果项目出现问题，或者想重新创建，只需要删除此文件夹，即可。</p><h4 id="2-查看Hexo是否安装成功"><a href="#2-查看Hexo是否安装成功" class="headerlink" title="2. 查看Hexo是否安装成功"></a>2. 查看Hexo是否安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -V</span><br></pre></td></tr></table></figure><h4 id="3-升级"><a href="#3-升级" class="headerlink" title="3. 升级"></a>3. 升级</h4><p>更新hexo到最新版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo -g</span><br></pre></td></tr></table></figure><h2 id="初始化博客网站"><a href="#初始化博客网站" class="headerlink" title="初始化博客网站"></a>初始化博客网站</h2><h4 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 必须进入到项目文件夹里面后，执行此命令</span><br><span class="line">hexo init </span><br></pre></td></tr></table></figure><p>如果指定，便会在目前的资料夹建立一个名为新的文件夹；否则会在目前资料夹初始化。</p><h4 id="2-启动Hexo"><a href="#2-启动Hexo" class="headerlink" title="2. 启动Hexo"></a>2. 启动Hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server(或者简写：hexo s)</span><br></pre></td></tr></table></figure><h4 id="3-浏览器打开博客"><a href="#3-浏览器打开博客" class="headerlink" title="3. 浏览器打开博客"></a>3. 浏览器打开博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 正常情况下，如果4000端口本地没有被占用，是如下地址（port预设为4000，可在 _config.yml 设定）</span><br><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><h2 id="注册GitHub账号并创建个人仓库"><a href="#注册GitHub账号并创建个人仓库" class="headerlink" title="注册GitHub账号并创建个人仓库"></a>注册GitHub账号并创建个人仓库</h2><p>打开<a href="https://github.com/%EF%BC%8C%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93New">https://github.com/，新建一个项目仓库New</a> repository，输入自己的项目名字，<strong>后面一定要加<code>.github.io</code>后缀</strong>，<code>README</code>初始化也要勾上。</p><blockquote><p>要创建一个和你用户名相同的仓库，后面加.<a href="http://github.io,只有这样,将来要部署到`github/">http://github.io，只有这样，将来要部署到`GitHub</a> page<code>的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册</code>GitHub`的用户名。例如我的：<a href="https://dxshello.github.io/">https://dxshello.github.io/</a></p></blockquote><h1 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h1><p>这一步，我们就可以将<code>hexo</code>和<code>GitHub</code>关联起来，也就是将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><ol><li>修改最后一行的配置：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repo</span>: <span class="attr">https</span>:<span class="comment">//github.com/DxsHello/DxsHello.github.io.git</span></span><br><span class="line">  <span class="attr">branch</span>: master</span><br></pre></td></tr></table></figure><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><ol start="2"><li>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="3"><li>每次部署的步骤，可按以下三步来进行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除了你之前生成的东西，也可以不加</span><br><span class="line">hexo generate # 生成静态文章，简写：hexo g</span><br><span class="line">hexo deploy # 部署文章，简写：hexo d</span><br></pre></td></tr></table></figure><h4 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo介绍&quot;&gt;&lt;a href=&quot;#Hexo介绍&quot; class=&quot;headerlink&quot; title=&quot;Hexo介绍&quot;&gt;&lt;/a&gt;Hexo介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;https://hexo.io</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
