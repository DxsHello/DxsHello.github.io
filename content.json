{"meta":{"title":"柚子想睡觉","subtitle":"","description":"","author":"wyq","url":"https://github.com/DxsHello/DxsHello.github.io","root":"/DxsHello/DxsHello.github.io/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-03-11T08:31:07.987Z","updated":"2022-03-11T08:31:07.987Z","comments":false,"path":"/404.html","permalink":"https://github.com/DxsHello/DxsHello.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-03-12T09:16:31.247Z","updated":"2022-03-12T09:16:31.241Z","comments":false,"path":"about/index.html","permalink":"https://github.com/DxsHello/DxsHello.github.io/about/index.html","excerpt":"","text":"一个平平无奇的上班族，热爱看电影、热爱生活，尽力在生活中提高自己。致力于网站建设与前端用户体验设计。喜欢新事物，关注前端动态，对新的技术有追求； 喜欢产品，喜欢设计，喜欢coding。 123456789101112131415161718192021222324&#123; name: &#x27;DxsHello&#x27; gender: &#x27;女&#x27;, profession: &#x27;不求代码改变世界，只想提升自己&#x27;, address: &#x27;北京市&#x27;, github: &#x27;https://github.com/DxsHello&#x27;, description: &#x27;致力于网站建设与前端用户体验设计&#x27;, skills: [ [&#x27;Html&#x27;, &#x27;Javascript&#x27;, &#x27;jQuery&#x27;, &#x27;CSS&#x27;, &#x27;ES6&#x27;, &#x27;Node&#x27;], [&#x27;Webpack&#x27;, &#x27;Gulp&#x27;], [&#x27;Less&#x27;,&#x27;Sass&#x27;], [&#x27;Git&#x27;], [&#x27;Vue&#x27;], [&#x27;Bootstrap&#x27;, &#x27;Data Table&#x27;], [&#x27;平面设计&#x27;] ], devTools: [ [&#x27;Sublime Text&#x27;, &#x27;Visual Studio Code&#x27;,], [&#x27;Chrome DevTools&#x27;, &#x27;Fiddler&#x27;], [&#x27;SourceTree&#x27;] ] &#125;"},{"title":"书单","date":"2022-03-11T08:37:39.889Z","updated":"2022-03-11T08:37:39.889Z","comments":false,"path":"books/index.html","permalink":"https://github.com/DxsHello/DxsHello.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-03-11T08:37:56.326Z","updated":"2022-03-11T08:37:56.326Z","comments":true,"path":"links/index.html","permalink":"https://github.com/DxsHello/DxsHello.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-03-11T08:38:04.211Z","updated":"2022-03-11T08:38:04.211Z","comments":false,"path":"repository/index.html","permalink":"https://github.com/DxsHello/DxsHello.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-11T08:38:14.720Z","updated":"2022-03-11T08:38:14.720Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vue调用本地摄像头","slug":"vue调用本地摄像头","date":"2023-01-12T07:43:09.000Z","updated":"2023-01-13T07:03:30.083Z","comments":true,"path":"2023/01/12/vue调用本地摄像头/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2023/01/12/vue%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%91%84%E5%83%8F%E5%A4%B4/","excerpt":"","text":"关于如何调用本地摄像头的问题不管是在vue项目里还是在其它项目当中，它都是window的对象。 重点提示： 调用摄像头时，会遇到getUserMedia is not implemented in this browser报错问题，一般为以下两方面： 由于调用摄像头有使用权限，只能在本地运行，线上需要https域名才可以使用。 客户端浏览器手动指定域名安全 使用谷歌内核的浏览器输入url： 1chrome://flags/#unsafely-treat-insecure-origin-as-secure 按步骤操作执行 实现原理 通过点击按钮（或进入页面直接调用函数）来调用函数，实现摄像头的调用。 打开摄像头调用getCompetence()函数。 获取媒体属性，旧版本浏览器可能不支持mediaDevices，我们首先设置一个空对象,使用getUserMedia，因为它会覆盖现有的属性。 这里，如果缺少getUserMedia属性，就添加它。我们需要一系列的判断,包括浏览器版本,或者srcObject,如果没有该属性那么就弃用它。 实现效果-代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;template&gt; &lt;div class=&quot;contentLeft&quot;&gt; &lt;video ref=&quot;video&quot; autoplay id=&quot;v&quot;&gt;&lt;/video&gt; &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;&lt;br /&gt; &lt;!-- &lt;el-button type=&quot;primary&quot; plain size=&quot;small&quot; @click=&quot;getCompetence()&quot;&gt;打开本地摄像头&lt;/el-button&gt; --&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import &#123; ref, reactive, onMounted &#125; from &#x27;vue&#x27; export default &#123; name: &quot;test&quot;, setup() &#123; // 调用权限-打开摄像头功能 const getCompetence = () =&gt; &#123; // 老的浏览器可能根本没有实现 mediaDevices，所以我们可以先设置一个空的对象 if (navigator.mediaDevices === undefined) &#123; navigator.mediaDevices = &#123;&#125;; &#125; if (navigator.mediaDevices.getUserMedia === undefined) &#123; navigator.mediaDevices.getUserMedia = function (constraints) &#123; // 首先，如果有getUserMedia的话，就获得它 var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; // 一些浏览器根本没实现它 - 那么就返回一个error到promise的reject来保持一个统一的接口 if (!getUserMedia) &#123; return Promise.reject(new Error(&#x27;getUserMedia is not implemented in this browser&#x27;)); &#125; // 否则，为老的navigator.getUserMedia方法包裹一个Promise return new Promise(function (resolve, reject) &#123; getUserMedia.call(navigator, constraints, resolve, reject); &#125;); &#125; &#125; const constraints = &#123; video: true, audio: false &#125;; let videoPlaying = false; let v = document.getElementById(&#x27;v&#x27;); let promise = navigator.mediaDevices.getUserMedia(constraints); promise.then(stream =&gt; &#123; // 旧的浏览器可能没有srcObject if (&quot;srcObject&quot; in v) &#123; v.srcObject = stream; &#125; else &#123; // 防止再新的浏览器里使用它，应为它已经不再支持了 v.src = window.URL.createObjectURL(stream); &#125; v.onloadedmetadata = function (e) &#123; v.play(); videoPlaying = true; &#125;; &#125;).catch(err =&gt; &#123; console.error(err.name + &quot;: &quot; + err.message); &#125;); &#125;; // 不用点击事件，直接调用摄像头方法 - 组织挂载完成后执行的函数 onMounted(() =&gt; &#123; getCompetence(); &#125;); return &#123; getCompetence, // 打开摄像头 &#125; &#125; &#125;&lt;/script&gt;","categories":[],"tags":[{"name":"摄像头","slug":"摄像头","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"}]},{"title":"js对接后台导出Excel并自定义表头","slug":"js对接后台导出Excel并自定义表头","date":"2022-09-26T06:24:07.000Z","updated":"2022-09-26T07:27:31.011Z","comments":true,"path":"2022/09/26/js对接后台导出Excel并自定义表头/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/09/26/js%E5%AF%B9%E6%8E%A5%E5%90%8E%E5%8F%B0%E5%AF%BC%E5%87%BAExcel%E5%B9%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%A4%B4/","excerpt":"","text":"javascript项目中，对接后台接口，通过后台返回的数据导出为Excel文件，并且根据返回的字段自定义对应的表头 1. html结构1&lt;button class=&#x27;btn btn-sm btn-success&#x27; onclick=&quot;exportExcel()&quot;&gt;一键导出所有明细Excel&lt;/button&gt; 2. 发送请求1234567891011121314151617181920212223242526272829async function exportExcel() &#123; await axios(&#123; url: &#x27;/export_excel&#x27;, method: &#x27;get&#x27;, timeout: 5000 &#125;).then(res =&gt; &#123; const fieids = [&quot;name&quot;, &quot;sex&quot;, &quot;age&quot;]; const titles = &#123; name: &#x27;姓名&#x27;, sex: &#x27;性别&#x27;, age: &#x27;年龄&#x27;, &#125; // 新建空workbook，然后加入worksheet const worksheet = XLSX.utils.json_to_sheet(res.data, &#123;header: fieids&#125;); // 获取数量 const range = XLSX.utils.decode_range(worksheet[&#x27;!ref&#x27;]); // 循环 for (let c = range.s.c; c &lt;= range.e.c; c++) &#123; const header = XLSX.utils.encode_col(c) + &#x27;1&#x27;; worksheet[header].v = titles[worksheet[header].v]; &#125; // 新建book const workbook = XLSX.utils.book_new(); // 生成xlsx文件(book，sheet数据，sheet命名) XLSX.utils.book_append_sheet(workbook, worksheet, &#x27;详情&#x27;); // 写文件(book，xlsx文件名称) XLSX.writeFile(workbook, &quot;excel文件的名称.xlsx&quot;) &#125;)&#125; 3. 注意事项-引入js文件 axios.js axios.min.js.map xlsx.core.min.js","categories":[],"tags":[{"name":"对接后台导出数据","slug":"对接后台导出数据","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E5%AF%B9%E6%8E%A5%E5%90%8E%E5%8F%B0%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/"}]},{"title":"vue3通过后台返回数据流，vue项目中导出excel","slug":"vue3通过后台返回数据流，vue项目中导出excel","date":"2022-08-17T01:29:01.000Z","updated":"2022-08-17T01:40:23.662Z","comments":true,"path":"2022/08/17/vue3通过后台返回数据流，vue项目中导出excel/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/08/17/vue3%E9%80%9A%E8%BF%87%E5%90%8E%E5%8F%B0%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E6%B5%81%EF%BC%8Cvue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AF%BC%E5%87%BAexcel/","excerpt":"","text":"项目中导出数据excel方法有很多种，以下主要讲通过后端返回excel文件，导出excel request.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129import axios from &#x27;axios&#x27;;const service = axios.create(&#123; // 超时时间 timeout: 5000, // 默认请求路径 baseURL:&#x27;&#x27;&#125;);// post请求头service.defaults.headers.post[&#x27;Content-Type&#x27;] = &#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;;// 请求拦截器service.interceptors.request.use( config =&gt; &#123; // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了 // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 if ( localStorage.getItem(&#x27;token&#x27;) &amp;&amp; config.headers) &#123; config.headers.common[&#x27;token&#x27;] = localStorage.getItem(&#x27;token&#x27;) &#125; return config; &#125;, error =&gt; &#123; console.log(error); return Promise.reject(); &#125;);// 响应拦截器service.interceptors.response.use( response =&gt; &#123; if (response.status === 200) &#123; return response.data; &#125; else &#123; Promise.reject(); &#125; &#125;, error =&gt; &#123; if (error.response.status) &#123; switch (error.response.status) &#123; // 操作失败 case 3000: break; // 参数错误 case 4000: break; // 权限不足 case 4001: break; // token过期 case 4002: break; // token认证失败 case 4002: break; // 没有找到资源 case 4004: break; // 服务器错误 case 5000: break; // 其他错误，直接抛出错误提示 default: &#125; return Promise.reject(error.response); &#125; &#125;);/** * 封装请求方式 */ export const request = &#123; /** * @name: 封装axios get方法 * @param url 请求连接 * @param params 请求参数 * @param callback 回调方法 */ get(url, params, callback) &#123; return new Promise((resolve, reject) =&gt; &#123; axios .get(url, &#123; params: params &#125;) .then(res =&gt; &#123; callback ? resolve(callback(res.data)) : resolve(res.data); &#125;) .catch(err =&gt; &#123; reject(err); &#125;); &#125;); &#125;, post(url, params, callback) &#123; return new Promise((resolve, reject) =&gt; &#123; axios .post(url,params) .then(res =&gt; &#123; callback ? resolve(callback(res.data)) : resolve(res.data); &#125;) .catch(err =&gt; &#123; reject(err); &#125;); &#125;); &#125;, put(url,params,callback) &#123; return new Promise((resolve, reject) =&gt; &#123; axios .put(url, params) .then(res =&gt; &#123; callback ? resolve(callback(res.data)) : resolve(res.data); &#125;, err =&gt; &#123; reject(err) &#125;) &#125;) &#125;, delete(url,params,callback) &#123; return new Promise((resolve, reject) =&gt; &#123; axios .put(url, params) .then(res =&gt; &#123; callback ? resolve(callback(res.data)) : resolve(res.data); &#125;, err =&gt; &#123; reject(err) &#125;) &#125;) &#125;, &#125;export default service; 文件api下的index.js文件(封装接口) 12345678910111213import request from &#x27;@/utils/request&#x27;;export function getDownLoad(params) &#123; return request(&#123; url: `/api/Report/getMaterialTracking`, method: &#x27;get&#x27;, params, responseType: &#x27;blob&#x27;, // 表明返回服务器返回的数据类型，不加会导致乱码 headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-download&#x27; &#125; &#125;)&#125; 对应文件内操作方法 12345678910111213141516// 下载按钮&lt;el-button type=&quot;info&quot; plain @click=&quot;handleDownload&quot;&gt;下载导入模版&lt;/el-button&gt;// 下载数据handleDownload() &#123; getDownLoad(query).then((res) =&gt; &#123; console.log(res); const link = document.createElement(&quot;a&quot;); link.style.display = &quot;none&quot;; link.href = URL.createObjectURL(res); link.setAttribute(&quot;download&quot;, &quot;表格名字.xlsx&quot;); document.body.appendChild(link); link.click(); document.body.removeChild(link); &#125;);&#125;","categories":[],"tags":[{"name":"vue3导出excel文件流","slug":"vue3导出excel文件流","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/vue3%E5%AF%BC%E5%87%BAexcel%E6%96%87%E4%BB%B6%E6%B5%81/"}]},{"title":"git clone报错问题","slug":"git-clone报错问题","date":"2022-07-29T02:28:24.000Z","updated":"2022-07-29T02:58:04.321Z","comments":true,"path":"2022/07/29/git-clone报错问题/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/07/29/git-clone%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/","excerpt":"","text":"问题最近在克隆git开源项目时，执行git clone命令后发现如下报错： 1error: RPC failed; curl 28 LibreSSL SSL_read: error:02FFF03C:system library:func(4095):Operation timed out, errno 60 fatal: expected flush after ref listing 解决方案 初始化git仓库（新的没有执行过git命令的文件夹，这一步必须要，已有.git目录的跳过） 1git init 执行命令 1git config http.sslVerify &quot;false&quot;","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/git/"}]},{"title":"vue组件相关资源","slug":"vue组件相关资源","date":"2022-07-29T02:03:26.000Z","updated":"2022-07-29T02:29:14.681Z","comments":true,"path":"2022/07/29/vue组件相关资源/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/07/29/vue%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90/","excerpt":"","text":"1. 拖拽式Vue组件代码生成编辑器介绍拖拽式Vue组件代码生成编辑器是一款Vue代码生成工具，英文全称：Vue-Component-Creater，简称VCC。也是一种LowCode解决方案。通过它可以快速完成Vue代码的结构搭建。 体验地址：https://vcc.sahadev.tech/ 源码地址：https://github.com/sahadev/vue-component-creater-ui 功能持续更新中… 2. 表单设计器 未知姓名 地址：http://cdn.kcz66.com/k-form-design.html form-generator - 适配 Element Plus UI 框架的表单设计器 功能特点： 可私有部署，可内置在项目中，在线可视化表单生成器 一键生成 Vue 组件代码 可内置在项目里，用户可在你的工具后台使用此组件生成表单 有表单验证功能 官方文档清晰详实 Github：https://github.com/JakHuang/form-generator form-render - 阿里团队开源表单设计器，自家 Antd UI 框架友好 功能特点： 支持阿里旗下的 Ant Design 和 Alibaba Fusion Design 功能逻辑清晰，快速部署 阿里旗下 20 多个业务线正在使用 支持表格校验、自定义嵌套、样式，可拖拽生成表单 Github：https://github.com/alibaba/x-render form-create - 支持Vue3 及 ElementPlusUI、AntDesign、iview 框架 功能特点： 全面支持 Vue 3 支持市面上 3 种主流框架 ElementPlusUI、AntDesign、iview 支持使用 json 数据生成表单 支持生成任何组件，提升表单的灵活性，可以实现功能更复杂的表单 内置组件缓存功能，提升渲染速度 双向数据绑定，生成规则变化后，页面会实时更新 Github：https://github.com/xaboy/form-create 卡拉云 - 低代码开发工具，表单设计器的超集，拖拽表单直接连接后端数据，即搭即用 功能特点： 新一代低代码开发平台，与前端框架 Vue、React等相比，卡拉云的优势在于不用首先搭建开发环境，直接注册即可开始使用。 开发者完全不用处理任何前端问题，只需简单拖拽，即可快速生成所需组件 可一键接入常见数据库及 API，根据引导简单几步打通前后端，数周的开发时间，缩短至 1 小时。 官网：https://kalacloud.com","categories":[],"tags":[{"name":"拖拽式Vue组件、表单设计器","slug":"拖拽式Vue组件、表单设计器","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E6%8B%96%E6%8B%BD%E5%BC%8FVue%E7%BB%84%E4%BB%B6%E3%80%81%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%99%A8/"}]},{"title":"js实现文件导出、文件下载","slug":"js实现文件导出、文件下载","date":"2022-05-25T07:36:29.000Z","updated":"2022-05-25T07:41:03.128Z","comments":true,"path":"2022/05/25/js实现文件导出、文件下载/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/05/25/js%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"通过创建a标签，实现下载功能 1234567891011function downLoad(content,fileName)&#123; var aEle = document.createElement(&quot;a&quot;); // 创建a标签 // blob = new Blob([content]); aEle.download = fileName; // 设置下载文件的文件名 // aEle.href = URL.createObjectUrl(blob); aEle.href = content; // content为后台返回的下载地址 aEle.click(); // 设置点击事件&#125;let URL =&#x27;XXXX&#x27; //下载地址downLoad(URL ,&#x27;test.xlxs&#x27;) 如果content非下载地址，而是下载的内容。实现代码微调即可。 123456789function downLoad(content,fileName)&#123; var aEle = document.createElement(&quot;a&quot;); // 创建a标签 blob = new Blob([content]); aEle.download = fileName; // 设置下载文件的文件名 aEle.href = URL.createObjectUrl(blob); aEle.click(); // 设置点击事件&#125;downLoad(&#x27;下载内容123123&#x27;,&#x27;test.txt&#x27;) 通过H5的download方法 12345678910111213function downFile(content, filename) &#123; var ele = document.createElement(&#x27;a&#x27;); // 创建下载链接 ele.download = filename; //设置下载的名称 ele.style.display = &#x27;none&#x27;; // 隐藏的可下载链接 // 字符内容转变成blob地址 var blob = new Blob([content]); ele.href = URL.createObjectURL(blob); // 绑定点击时间 document.body.appendChild(ele); ele.click(); // 然后移除 document.body.removeChild(ele);&#125;;","categories":[],"tags":[{"name":"文件导出、下载","slug":"文件导出、下载","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%E3%80%81%E4%B8%8B%E8%BD%BD/"}]},{"title":"网站及资源","slug":"网站及资源","date":"2022-05-25T06:01:32.000Z","updated":"2022-05-26T02:40:24.393Z","comments":true,"path":"2022/05/25/网站及资源/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/05/25/%E7%BD%91%E7%AB%99%E5%8F%8A%E8%B5%84%E6%BA%90/","excerpt":"","text":"自己的github地址 框架： VUE（渐进式JavaScript框架） NUXT.JS（Vue.js通用应用框架） Element（基于Vue 2.0）、Element Plus（基于Vue3） DataV（vue大屏数据展示组件库） Vite（一种新型前端构建工具） Bootstrap Select2（是JQuery-based替换选择框，它支持搜索、远程数据集和结果分页。） AdminLTE（最佳开源管理仪表板和控制面板主题。AdminLTE建立在Bootstrap之上，提供了一系列响应迅速、可重用和常用的组件。） Zepto.js（API 中文版） 若依管理系统（基于SpringBoot、Shiro、Mybatis的权限后台管理系统） tailwindcss（通用的类CSS框架） 开源网站： wangEditor（开源Web富文本编辑器） Apache ECharts（一个基于JavaScript的开源可视化图表库） Casdoor（一个增删改查的网页） 静态资源托管库（前端静态资源库） 插件： Datatables（一款jquery表格插件。是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。） Multiple Select（多选。是一个JQuery插件，可以用复选框选择多个元素。） bootstrap-datepicker（是一款Bootstrap日期选择器插件。该日期选择器插件支持多种语言,可通过配置参数设置日期选择器,日期范围选择器等,功能非常强大。） daterangepicker（是Bootstrap的一个时间组件,使用很方便用于选择日期范围的JavaScript组件。 设计用于Bootstrap CSS框架。它最初是为了改善报表而创建的,它可以连接到任何网页元素,弹出两个日历,用于选择日期、时间或从预定义的范围,如“最后30天“。） JQuery插件库 时间戳转换工具 Photopea（在线图像编辑器） html5时间轴插件 JQuery横向时间轴插件timeline 资源 ： 设计导航（分享优质设计网站及资源，提升设计师们的知识与阅历。分三大类：Web/UI、建筑/室内、设计书籍） HTML5、CSS3、JS Demos各种特效 CSS3按钮边框特效 免费在线流程图思维导图 ico图标制作 工具： CODELT（变量命名神器） 在线工具（基于Web网页的各类小工具软件） 在线扒站工具（一键将指定的网页的HTML、CSS、JS等前端资源打包下载） Color Hunt（调色板）","categories":[],"tags":[{"name":"资源","slug":"资源","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E8%B5%84%E6%BA%90/"}]},{"title":"Vue中的Cannot GET/xxx","slug":"Vue中的Cannot-GET-xxx","date":"2022-05-19T07:16:23.000Z","updated":"2022-05-19T07:49:55.861Z","comments":true,"path":"2022/05/19/Vue中的Cannot-GET-xxx/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/05/19/Vue%E4%B8%AD%E7%9A%84Cannot-GET-xxx/","excerpt":"","text":"场景 Vue3 模式：单页面应用（SPA）模式 路由模式：history 问题一：刷新页面，出现Cannot GET / xxx 解决办法：设置historyApiFallback: true webpack.config.js 12345devServer: &#123; ... historyApiFallback: true ... &#125; 问题二：在问题一解决的基础上增加代理（proxy）配置，刷新页面，再次出现 Cannot GET / xxx问题，并且控制台还有404报错信息 基础配置 webpack.config.js 12345678910devServer: &#123; ... historyApiFallback: true, proxy: &#123; &#x27;/&#x27;: &#123; target: &#x27;http://localhost:3000&#x27;, &#125; &#125;, ...&#125; 问题 解决办法：bypass webpack.config.js 123456789101112131415devServer: &#123; ... historyApiFallback: true, proxy: &#123; &#x27;/&#x27;: &#123; target: &#x27;http://localhost:3000&#x27;, bypass: function (req, res, proxyOptions) &#123; if (req.headers.accept.indexOf(&#x27;html&#x27;) !== -1) &#123; return &#x27;index.html&#x27;; // SPA，只有一个html页面，所有都返回index.html页面 &#125; &#125;, &#125; &#125;, ...&#125;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/Vue/"}]},{"title":"hexo搭建博客后图片无法显示的解决办法","slug":"hexo搭建博客后图片无法显示的解决办法","date":"2022-05-18T06:47:06.000Z","updated":"2022-05-18T07:10:47.840Z","comments":true,"path":"2022/05/18/hexo搭建博客后图片无法显示的解决办法/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/05/18/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"1. 要添加图片，先npm install一个hexo-asset-image的依赖1npm install https://github.com/CodeFalling/hexo-asset-image --save 2. 操作步骤 然后把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。 比如我将post_asset_folder设为true之后hexo new post “first-page”之后新建了一篇文章，就会同时在hexo/source/_post文件夹下生成一个.md文件和一个同名文件夹，文件夹存放文章中的图片 把图片放到.md文件的同名文件夹”first-page”里，最后在.md文件中引用图片 1![图片描述](./包名/图片名.png) 保存文件的修改之后，在命令行输入hexo clean,接着输入hexo g –d。在浏览器输入域名后查看相关文章，显示图片成功！！！","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/hexo/"}]},{"title":"vue3环境搭建及项目搭建","slug":"vue环境搭建及项目搭建","date":"2022-05-18T02:20:02.000Z","updated":"2022-05-18T06:25:19.765Z","comments":true,"path":"2022/05/18/vue环境搭建及项目搭建/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/05/18/vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/","excerpt":"","text":"1. 安装node.js安装完毕之后，执行一下命令查看node版本： node -v 2. npmnpm是随同nodejs一起安装的包管理工具，能解决nodejs代码部署上的很多问题； 可以通过输入 npm -v 来测试是否安装成功 3. 创建vue项目 使用 npm 全局安装 vue-cli(最新) 1npm install -g @vue/cli 查看现在的版本 1vue -V 创建一个项目 1vue create 项目名称不能用中文 注意：不能用驼峰方式命名项目名称了，它会报错的，只能全小写 选择预设(默认/手动设置) 12345? Please pick a preset: (Use arrow keys) testPreset ([Vue 3] less, babel, router, vuex) Default ([Vue 3] babel, eslint) Default ([Vue 2] babel, eslint) ❯ Manually select features 移动上下键，选择最后一个Manually select features进行手动创建，按回车 选择需要安装的插件 12345678910? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed) ◉ Babel ◯ TypeScript ◯ Progressive Web App (PWA) Support ◉ Router ◉ Vuex ◉ CSS Pre-processors ◯ Linter / Formatter❯◯ Unit Testing ◯ E2E Testing 移动上下键，箭头指着时，按空格键选中所需要的，以上选择的是babel、router、vuex、css pre-processors这四个插件，按回车到下一步 选择vue版本 123? Choose a version of Vue.js that you want to start the project with (Use arrow keys)❯ 3.x 2.x 是否按照history的方式创建路由，选择yes，回车下一步 1? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) y 选择css预编译工具，选择less，回车下一步 1234? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass) ❯ Less Stylus 想把的配置文件放在一个独立的配置文件中？还是放到package.json中？选择第一个，回车下一步 123? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)❯ In dedicated config files In package.json 是否保存预设并用到以后的项目中，选择yes，回车下一步 1? Save this as a preset for future projects? (y/N) yes 保存的预设名称是什么，设为testPreset，回车下一步 1? Save preset as: testPreset 选择安装工具，回车下一步直到安装完成。 1? Pick the package manager to use when installing dependencies: NPM 运行 12cd 项目名称npm run serve 最终全部结果 123456789? Please pick a preset: Manually select features? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors? Choose a version of Vue.js that you want to start the project with 3.x? Use history mode for router? (Requires proper server setup for index fallback in production) Yes? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? Yes? Save preset as: testPreset? Pick the package manager to use when installing dependencies: NPM 4. 结果运行地址，出现如下页面： 5. 特别注意事项在mac上安装会报错Error: EACCES: permission denied, access ‘/usr/local/lib/node_modules 原因：执行命令时没有获得管理员权限 解决办法：在命令行前面添加sudo获取管理员权限 例如原来的为：npm install -g vue-cli 应该改为：sudo npm install -g vue-cli","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/vue/"}]},{"title":"Mac OS上搭建Hexo博客流程","slug":"Mac OS上搭建Hexo博客流程","date":"2022-03-11T06:04:22.546Z","updated":"2022-05-18T08:26:09.440Z","comments":true,"path":"2022/03/11/Mac OS上搭建Hexo博客流程/","link":"","permalink":"https://github.com/DxsHello/DxsHello.github.io/2022/03/11/Mac%20OS%E4%B8%8A%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/","excerpt":"","text":"Hexo介绍 https://hexo.io/zh-cn/ Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。 环境准备1. 安装git 为了把本地的网页文件上传到github上面去，需要用到工具–Git[下载地址：https://git-scm.com/downloads ] 安装完成后在命令提示符中输入git –version来查看一下版本验证是否安装成功 2. 安装node.js 首先根据自己电脑型号下载稳定版，下载地址 https://nodejs.org/en/ 安装选项全部默认即可，一路点击Next 安装完成后，打开命令提示符，输入node -V 和npm -V，如果出现版本号，那么安装成功。 3. 安装淘宝镜像12// 使用npm安装相关依赖包，速度很慢，建议安装淘宝镜像，后续命令使用cnpmnpm config set registry https://registry.npm.taobao.org 安装hexo前面安装好git和nodejs后，就可以安装hexo了，可以先创建一个文件夹Blog，用来存放自己的博客文件，然后cd到这个文件夹下，定位到该目录下后: 1. 安装Hexo1npm install -g hexo-cli 后续如果项目出现问题，或者想重新创建，只需要删除此文件夹，即可。 2. 查看Hexo是否安装成功1hexo -V 3. 升级更新hexo到最新版 1npm update hexo -g 初始化博客网站1. 初始化项目12// 必须进入到项目文件夹里面后，执行此命令hexo init 如果指定，便会在目前的资料夹建立一个名为新的文件夹；否则会在目前资料夹初始化。 2. 启动Hexo1hexo server(或者简写：hexo s) 3. 浏览器打开博客12// 正常情况下，如果4000端口本地没有被占用，是如下地址（port预设为4000，可在 _config.yml 设定）http://localhost:4000/ 注册GitHub账号并创建个人仓库打开https://github.com/，新建一个项目仓库New repository，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上。 要创建一个和你用户名相同的仓库，后面加.http://github.io，只有这样，将来要部署到`GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册GitHub`的用户名。例如我的：https://dxshello.github.io/ 将hexo部署到GitHub这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。 修改最后一行的配置： 1234deploy: type: git repo: https://github.com/DxsHello/DxsHello.github.io.git branch: master repository修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 每次部署的步骤，可按以下三步来进行 123hexo clean # 清除了你之前生成的东西，也可以不加hexo generate # 生成静态文章，简写：hexo ghexo deploy # 部署文章，简写：hexo d 一些常用命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/hexo/"}]}],"categories":[],"tags":[{"name":"摄像头","slug":"摄像头","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E6%91%84%E5%83%8F%E5%A4%B4/"},{"name":"对接后台导出数据","slug":"对接后台导出数据","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E5%AF%B9%E6%8E%A5%E5%90%8E%E5%8F%B0%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/"},{"name":"vue3导出excel文件流","slug":"vue3导出excel文件流","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/vue3%E5%AF%BC%E5%87%BAexcel%E6%96%87%E4%BB%B6%E6%B5%81/"},{"name":"git","slug":"git","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/git/"},{"name":"拖拽式Vue组件、表单设计器","slug":"拖拽式Vue组件、表单设计器","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E6%8B%96%E6%8B%BD%E5%BC%8FVue%E7%BB%84%E4%BB%B6%E3%80%81%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%99%A8/"},{"name":"文件导出、下载","slug":"文件导出、下载","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA%E3%80%81%E4%B8%8B%E8%BD%BD/"},{"name":"资源","slug":"资源","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/%E8%B5%84%E6%BA%90/"},{"name":"Vue","slug":"Vue","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/Vue/"},{"name":"hexo","slug":"hexo","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/hexo/"},{"name":"vue","slug":"vue","permalink":"https://github.com/DxsHello/DxsHello.github.io/tags/vue/"}]}